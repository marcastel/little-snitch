#! /bin/ksh
#! @brief     Little snitch rule management utility
#! @revision  2019-11-03 (Sun) 04:03:09
# @{ INIT

# Essential constructs and globals
enum boolean=( false true )
typeset -C rc=(
    typeset progname=${0##*/}
    typeset command=none
    boolean use_clipboard=true      # Process clipboard's content (add-urls)
    boolean flat_file=false         # Assume each input line is an domain/hostname/IP address (add-urls)
)

# Collect command line command and remove it from argument list
typeset rc.command=none; [[ -n $1 && ${1:0:1} != - ]] && { rc.command=${1//[_-]/}; shift; }

# @}
# @{ FUNC

# Interactively check URLs and update white/black lists
function snitch_addurls { # [ --clipboard ] [ FILE ... ]

    # See if we should be using the clipboard otherwise collect the source file (or stream) to be processed
    boolean clipboard=false; [[ -n $1 && $1 == --clipboard ]] && { clipboard=true; shift; } || typeset source=${1:--}

    # Collect the results set array to be analysed and determine the count of records in set
    typeset -a records; snitch_pbimport @records ${source:---clipboard}; integer count=${#records[@]}

    # Make sure we have records to process
    (( count == 0 )) && return

    # Initialise counters
    integer blacklisted=0 whitelisted=0 processed=0

    # Clear screen and prompt user to disable Little Snitch
    clear; print '\E[34;1;4mAdd URLs to black/white lists\E[0m\n'
    print -f '\E[35myou are advised to disable Little Snitch; hit <ENTER> to continue ... \E[0m'
    read -n 1 -N 1 null; printf '\r\E[M'

    # Initialise the prompt
    typeset prompt='\E[1;4mb\E[0mlacklist, \E[1;4mw\E[0mhitelist, \E[1;4mi\E[0mgnore, or \E[1;4ma\E[0mbort'
            prompt+=' \E[0;2m(use uppercase to flag host instead of domain)\E[0m ?'

    # Interactively check each URL in list
    integer i; for (( i = 0; i < count; ++ i )); do

        typeset url=${records[$i].destination}
        boolean domain=false; [[ ${url:0:7} == 'domain ' ]] && domain=true url=${url:7}
        boolean blacklist=true

        # Ignore entries which have already been referenced
        grep "^$url\$" {black,white}list.{domains,addresses,hosts} > /dev/null &&
        { print "\E[2mignoring     $url\E[0m"; (( ++ processed )); continue; }

        # Open URL in browser (background load)
        open -g "http://$url"

        # Collect user's input as to what to do with this entry
        while true; do

            printf "$url: $prompt"; read -n 1 -N 1 action; printf '\r\E[M'

            case $action in
            [Bb]) print "\E[31mblacklisting $url\E[0m"; [[ $action == B ]] && domain=false ;;
            [Ww]) print "\E[32mwhitelisting $url\E[0m"; [[ $action == W ]] && domain=false blacklist=false ;;
            i)    print "\E[2mignoring     $url\E[0m"; (( ++ processed )); break ;;
            a)    print "\E[2maborting\E[0m";          break ;;
            *)    continue ;;
            esac

            typeset basename=blacklist; (( blacklist == false )) && basename=whitelist

            if [[ $url == ~(Ex)(?:^ \d+\.\d+.\d+.\d+ $) ]]
            then typeset extension=addresses
            elif (( domain == true ))
            then typeset extension=domains
            else typeset extension=hosts; fi

            typeset file="$basename.$extension"
            print "> updating $file with $url"
            sed -i '' $'$a\\\n'" $url" $file

            (( ++ processed ))
            break

        done

        [[ $action == a ]] && break

    done

    print -f '\E[35mplease re-enable Little Snitch and hit <ENTER> to continue ... \E[0m'
    read -n 1 -N 1 null; printf '\r\E[M'

    print -- "\nSummary:\n- Processed $processed/$count URLs"
    print -- "- \E[31m$blacklisted blacklisted\E[0m and \E[32m$whitelisted whitelisted\E[0m URLs"

}

# Import Little Snitch rules in clipboard syntax
function snitch_pbimport { # [ @records ] [ --clipboard ] source-file

    # Determine whether we are handling a by-reference call
    boolean byref=false; [[ -n $1 && ${1:0:1} == @ ]] && { byref=true; nameref records=${1:1}; shift; }

    # See if we should be using the clipboard otherwise collect the source file (or stream) to be processed
    boolean clipboard=false; [[ -n $1 && $1 == --clipboard ]] && { clipboard=true; shift; } || typeset source=${1:--}

    # Initialise the results set array and its associated counter
    typeset -a records; integer count=0

    # Parse the input and construct the results set in the `records` array
    typeset key value; ( (( clipboard == true )) && pbpaste || cat $source ) | while read key value; do

        # Make sure we have something to process
        [[ -n $key ]] || continue

        # Trim colon from key and, if applicable, initialise new record
        key=${key%:}; [[ $key == action ]] && typeset -C records[$count]

        # Save the collected key/value pair
        nameref field=records[$count].$key; field="$value"

        # If we are in presence of the last record field, increment counter
        [[ $key == notes ]] && (( ++ count ))

    done

    # Unless called by reference, dump the results set
    (( byref == false  )) && print -v records

}

# Construct Little Snitch RSS rule for whitelisted destination
function snitch_rssallowed { # <no-params>

    typeset fmt='{ "action" : "allow", "ports" : "%s", "process" : "any", "protocol" : "tcp", "remote-%s" : "%s" }'
    integer count=0; typeset all=( addresses domains hosts )

    # Determine the number of entries that we will process
    typeset file; for file in ${all[@]}; do

        # Make sure the definition file exists
        file=whitelist.$file; [[ -f $file ]] || continue;

        # Count number of definition lines in file
        count+=$(grep -v '^#' $file | grep -v '^$' | wc -l)

    done

    # Make sure we have something to process
    (( count > 0 )) || return

    printf '"rules": [\n'

    # Process all possible definition files
    for file in ${all[@]}; do

        # Make sure the definition file exists
        typeset path=whitelist.$file; [[ -f $path ]] || continue

        # Read the definition file, line by line
        typeset line; cat $path | while read line; do

            # Ignore empty lines and comments
            [[ -z $line || ${line:0:1} == '#' ]] && continue

            # Determine if we should append a JSON comma
            typeset comma=','; (( -- count > 0 )) || comma=

            # Output the JSON line
            printf "$fmt,\n$fmt$comma\n" 80 $file $line 443 $file $line

        done

    done

    printf ']\n'

}

# Construct Little Snitch RSS rule for blacklisted destination
function snitch_rssdisabled { # <no-param>

    typeset fmt='{ "action" : "allow", "ports" : [ "80", "443" ], "process" : "any", "protocol" : "tcp", "remote-%s" : "%s" }'
    typeset all=( addresses domains hosts )

    # Process all possible definition files
    for file in ${all[@]}; do

        # Make sure the definition file exists
        typeset path=blacklist.$file; [[ -f $path ]] || continue

        # Count number of definition lines in file
        count=$(grep -v '^#' $path | grep -v '^$' | wc -l)

        # Make sure we have something to process
        (( count > 0 )) || return

        printf '"denied-remote-%s": [' $file

        # Read the definition file, line by line
        typeset line; cat $path | while read line; do

            # Ignore empty lines and comments
            [[ -z $line || ${line:0:1} == '#' ]] && continue

            # Determine if we should append a JSON comma
            typeset comma=','; (( -- count > 0 )) || comma=

            # Output the JSON line
            printf '"%s"%s\n' "$line" "$comma"

        done

        printf '],\n'

    done

    # Print dummy field so we don't have to clear the last comma above
    printf '"owner": "me"\n'

}

# Construct Little Snitch RSS feed (either blacklist or whitelist)
function snitch_rssfeed { # [ 'white' | 'black' ]

    typeset kind=${1:-black}

    if [[ $kind == black ]]; then (
        snitch_rssheader 'ISLE Blacklist' 'Disabled Internet resources for any process (and any user).'
        snitch_rssdisabled
        snitch_rssfooter
    )   | ${rc.jq} > blacklist.lsrules

    else (
        snitch_rssheader 'ISLE Whitelist' 'Allowed HTTP(S) targets for any process (and any user).'
        snitch_rssallowed
        snitch_rssfooter
    )   | ${rc.jq} > whitelist.lsrules; fi

}

# Construct Little Snitch RSS feed footer
function snitch_rssfooter { # <no-param>

    printf '}\n'

}

# Construct Little Snitch RSS feed header
function snitch_rssheader { # LABEL

    typeset name="$1" brief="$2"
    printf '{\n"name": "%s",\n"description": "%s",\n' "$name" "$brief"

}

# @}
# @{ CMDS

# Append URLs to RSS feed source files
function snitch_cmd_addurls { # [ FILE ... ]

    # TODO for testing purposes only
    print snitch_addurls $@
    snitch_addurls $@
    #snitch_addurls --clipboard

}

# Build the Little Snitch RSS feed file(s)
function snitch_cmd_buildrss { # [ 'all' | 'black' | 'white' ]

    typeset scope=$1; boolean scoped=false
    typeset rc.jq='jq .'; whence -q jq || rc.jq=cat

    [[ -n $scope && $scope == @(all|black?(list)) ]] && { scoped=true; snitch_rssfeed black; }
    [[ -n $scope && $scope == @(all|white?(list)) ]] && { scoped=true; snitch_rssfeed white; }
    (( scoped == true )) && return

    typeset cmd="${rc.progname} build-rss"
    [[ -z $scope ]] &&
    print -u2 "\E[2m$cmd: \E[0;31mno scope specified\E[0m" ||
    print -u2 "\E[2m$cmd: \E[0;1m$scope\E[0;2m: \E[0;31munrecognised RSS scope\E[0m"
    print -u2 "Run \E[1m$cmd --man\E[0m for this command's UNIX man(1) page."
    exit 2

}

# @}
# @{ HELP

typeset progname=${0##*/} usage=$'[-1]'

case ${rc.command} in
addurls)  progname+=' add-urls'  usage+="[+NAME?$progname"$' -- interactively add URLs]
[+DESCRIPTION?This command intended to provide a semi-automated way of classifying URLs as white- or black-listed. The default
behaviour, when called without command line arguments, is to process the contents of the clipboard. Otherwise each provided
argument is assumed to be a file and will be parsed accordingly. Each parsed URL is loaded in your default Internet browser; the
browser application will be loaded in the background so that your terminal session doesn\'t lose its focus. The URL\'s name will
be displayed and a menu will allow you to mark the URL as black- or white-listed. You may also ignore the URL; the URL will be
automatically ignored if it has already been appended to any existing list. URLs are automatically dispatched in the appropriate
data file depending on whether we are considering domain names, host names or IP addresses -- only IPv4 addresses are currently
supported.]
[+?Unless the \b--flat\b option has been given, the input is expected to be one or more Little Snitch rules as obtained when
selecting rules in the \bLittle Snitch Configuration\b application and copying then to the clipboard. Each rule is defined as a
set of key/value pairs as shown below. Only the \bdestination\b key/value pair is retained and all others are discarded. If the
\b--flat\b option is given, then each input line is assumed to be a regular URL.][+\
    action:: allow
    direction:: outgoing
    priority:: regular
    process:: any
    owner:: system
    destination:: domain icloud.com, icloud-content.com
    port:: 443
    protocol:: 6
    notes:: This rule is necessary if you want to use iCloud services.]
[f:flat?Assume one URL per input line.]

[ \b-\b | \bfile ...\b ]'
;;
buildrss) progname+=' build-rss' usage+="[+NAME?$progname"$' -- build Little Snitch RSS blacklist and/or whitelist feeds.]
[+DESCRIPTION?This command is used to convert flat files containind domain names, host names and IP addresses into the Little
Snitch RSS syntax. Its purpose is to facilitate the management and maintenance of such rule sets. The generated file(s) can then
be directly referenced in Little Snitch, either locally or over the net. This command should be invoked with one of three
keywords:]{
[+all?Build both the blacklist and the whitelist]
[+black?Build the blacklist (alternatively: \bblacklist\b)]
[+white?Build the whitelist (alternatively: \bwhitelist\b)]}
[+?\bNote\b that there are no security concerns in making this file available over the Internet. Furthermore, the URLs originating
from multiple sources, no Internet interests can be deducted; this is just noise for phishing and privacy invaders.]

[ \'\ball\b\' | \'\bblack\b\' | \'\bwhite\b\' ]'
;;
expand)   progname+=' rc-syntax' usage+="[+NAME?$progname"$' -- interactively add URLs]
[+DESCRIPTION?Little Snitch\'s plain ASCII rule specifications are quite verbose spawning multiple lines; definition files can
become very very big!]
[+CONFIGURATION FILE SYNTAX?Configuration files utility provide some syntaxic sugar to define abbreviated rules that are then
easily converted to Little Snitch rules using this utility using the \bconvert\b action.]
[+?Though not mandatory, it is recommended to name configuration files with the \b.lsr\b extension, which is the abbreviation
for \bLittle Snitch rule\b. It is also recommended to group configuration files by topic in subdirectories. A typical
subdirectory split could look like this:][+\
        devices/        # Peripherals and devices (printers, ...)
        foss/           # Open source components (Firefox, ...)
        services/       # Online-services (SaSS, ...)
        software/       # Licensed software
        system/         # System processes
        web/            # Web sites (http, https)]
[+?Configuration files are line-based records identified by the first character of the line.]{
        [%%?Process path]
        [????Help line]
        [++/-?Abbreviated rule]
        [##?Comment line]}
[+Process path?The process path provides the absolute path of the MacOS binary to which subsequent abbreviated rules apply.][+\
        % /Applications/Mail.app/Contents/MacOS/Mail]
[+?Multiple process paths can be specified, one process path per line. Subsequent abbreviated rules will be applied to all process
paths. Imagine for instance defining a set of web browser rules for all browser applications installed on your Mac. Whenever a
process path is encountered after one or more abbreviated rules, the previous list of process paths is discarded; this allows to
contain multiple process groups, each with their own set of rules.]
[+Help line?A help line can be associated to a process path. This help line will be embedded in each generated rule and will be
visible in the Little Snitch application, once the generated rules have been imported. Multiple contiguous help lines will be
concatenated into a single help line.]
[+?The help line will be prefixed with a timestamp (\v%Y%m%d-%H%M%S\v) and suffixed with the name of the rules definition file
being processed.]
[+Abbreviated rule?Each rule definition line looks like this:][+\
        <action> <service>/<protocol> <direction> <scope> <destination> ...]
[+?where:]{
[action? The action Little Snitch should take when enacting this rule; this is either the \v+\v or \v-\v symbol, to respectively
allow or deny the connection.]
[service?This is either a service name or a port number. If a service name is provided, it will be looked up in \v/etc/services\v
and converted into a port number. Multiple services may be provided, separated by a comma (e.g. \v80,8080,443\v).]
[protocol?This is either the protocol name or its associated number as found in \v/etc/protocols\v. Protocol names are converted
to a number. Multiple protocols can be specified, separated by a comma (e.g. \vtcp,udp\v).]
[direction?This allows to specify whether the rule applies to outgoing communications (\vout\v), incoming communications (\vin\v),
or both (\vin/out\v).]
[scope?The scope allows to restrict the rule definition line to the current user (\vuser\v), to system processes (\vsys\v) or, on
the contrary, to be enabled for everyone (\v*\v).]
[destination?Destination can be either an IP address, a host name or a domain name. Multiple destinations can be specified on a
same line. Each destination should be separated from the next by at least one space. IP addresses, host names, and domain names
can be freely mixed.]{
[local-net  ?Local network]
[dns-servers?DNS servers]
[broadcast  ?Broadcast addresses]
[bonjour    ?Bonjour addresses]
[multicast  ?Multicast addresses]}}
[+?Rule definition lines can get quite long. Unix line-continuation marks are supported to split a rule over multiple lines, as
illustrated in the example below:][+\
        - http,https/tcp in/out \\
            url1 \\
            url2 \\
            url3]
[+Comment line?Comments are introduced by a hash mark, exactly as in regular shell scripts. Note however that the hash tag must be
the first character on the line, leading whitespaces are not recognised.] [+BLACK/WHITE LISTS?Though abbreviated rules are
significantly less verbose than normal Little Snitch rules, we often need plain black lists (and white lists) to apply a same rule
to a wide range of hosts and domains. This behaviour is toggled with the \v--blacklist\v and \v--whitelist\v options that both
trigger the \blist mode\b. In this mode, the file parser doesn\'t expect a configuration file syntax, but rather a flat list of
hosts, ip address and ranges, domains or reserved destination keywords.]
[+?The aforementioned options toggle, respectively, deny and allow rules. The \v--direction\v, \v--protocol\v, \v--scope\v, and
\v--service\v options, as well as the \v--process\v and \v--help\v options, can be used to customise the rule construction. If
none specified, the rules will be automatically constructed for outgoing connections:][+\
        % any
        ?? Blacklist
        - http,https/tcp out]
[+DIRECTORIES]{
        [\v'${DF_PREFIX:-/usr/df}$'/etc/snitch\v?Global Little Snitch rules]
        [\v~/etc/snitch\v?User specific Little Snitch rules]}
[+FILES]{[~/'$CURRENT_RULES$'?User-specific configuration file.]}'
;;
*) usage+=$'[+NAME?snitch -- command line utility for the maintenance of Little Snitch rules.]
[+DESCRIPTION?Little Snitch is an essential security component on my laptops and workstations -- and probably a reason why I
resist adopting smartphones and tables, which are for me, the most unsecure platforms one could possibly imagine in a world of
pervasive tracking of all you online activities. While Little Snitch is a great piece of software and does its job nicely, it is a
real pain to manage and maintain you rules. This utility is here to assist in the management and maintenance of such rules.]
[+?The following commands are made available:]{
[+add-urls?Allows to interactively add URLs to the maintained lists. This is intended to simultaneously display the URL in a
browser window and provide a command line prompt on what action should be undertaken with the displayed URL.]
[build-rss?Concatenantes rules and constructs the Little Snitch RSS ruleset. This command is typically called periodically from a
scheduler to make all updates available.]
}
[+?I would have liked to say that this utility automates the handling or rules, unfortunately this is not fully the case because
\bObjective Development\b, the makers of Little Snitch, don\'t provide the conventional hooks for such automation. For security
reasons? Perhaps. Or perhaps not. In all cases, it is difficult to wrap scripts around Little Snitch. They have introduced their
RSS-like feature -- which is great, but at the same time they have encrypted their rules files, whose contents we could previously
list. Hopefully over time we will be able to extend this script and further its automated handling of rules.]'
;;
esac

# @}
# @{ OPTN

# Process command line command
while getopts -a "$progname" "$usage" option; do case $option in
    *) ;;
esac; done; (( OPTIND > 1 )) && shift $(( OPTIND - 1 )); OPTIND=1

# @}
# @{ MAIN

snitch_cmd_${rc.command} "$@"

# @}
# vim: nospell
