#! ksh

function snitch_hlp_snitch {
nameref usage=${1:1}
usage+="[+NAME?${rc.progname}"$' -- command line utility for the maintenance of Little Snitch rules.]
[+DESCRIPTION?Little Snitch is an essential security component on my laptops and workstations -- and probably a reason why I
resist adopting smartphones and tables, which are for me, the most unsecure platforms one could possibly imagine in a world of
pervasive tracking of all you online activities. While Little Snitch is a great piece of software and does its job nicely, it is a
real pain to manage and maintain you rules. This utility is here to assist in the management and maintenance of such rules.]
[+?The following commands are made available:]{
[+add-urls?Allows to interactively add URLs to the maintained lists. This is intended to simultaneously display the URL in a
browser window and provide a command line prompt on what action should be undertaken with the displayed URL.]
[build-rss?Concatenantes rules and constructs the Little Snitch RSS ruleset. This command is typically called periodically from a
scheduler to make all updates available.]
}
[+?I would have liked to say that this utility automates the handling or rules, unfortunately this is not fully the case because
\bObjective Development\b, the makers of Little Snitch, don\'t provide the conventional hooks for such automation. For security
reasons? Perhaps. Or perhaps not. In all cases, it is difficult to wrap scripts around Little Snitch. They have introduced their
RSS-like feature -- which is great, but at the same time they have encrypted their rules files, whose contents we could previously
list. Hopefully over time we will be able to extend this script and further its automated handling of rules.]
[+ABBREVIATED SNITCH RULES?The \binterchage format\b used by \aLittle Snitch\a is quite verbose. While this format is fine for
interchanging rules between environments, typically through the clipboard, it is not appropriate for maintaining master copies of
rules in files. To address this issue we support an \aabbreviated Snitch rules\a syntax; files using this syntax should use the
\v*.asr\v extension.]
[+?Files containing \babbreviated Snitch rules\b are plain text files whose content is expected to be read and processed
sequentially in a single pass. Each line in such files represents a complete statement; the conventional UNIX syntax for line
continuation -- i.e. a trailing backslash, is honoured to allow spliting long statements over multiple lines.]
[+?The first character of each line indicates the kind of statement that is contained on that line; five distinct statements are
currently supported:]{
  [+%?Process path]
  [+???Help line]
  [++?Allow rule]
  [+-?Deny rule]
  [+#?Comment]}
[+Process (%)?The process path provides the absolute path of the MacOS binary to which subsequent abbreviated rules apply (for
example \v/Applications/Mail.app/Contents/MacOS/Mail\v).]
[+?Multiple process paths can be specified, one process path per line. Subsequent abbreviated rules will be applied to all
process paths. Imagine for instance defining a set of web browser rules for all browser applications installed on your Mac.
Whenever a process path is encountered after one or more abbreviated rules, the previous list of process paths is discarded;
this allows to contain multiple process groups, each with their own set of rules.]
[+Help line (??)?A help line can be associated to a process path. This help line will be embedded in each generated rule and will
be visible in the Little Snitch application, once the generated rules have been imported. Multiple contiguous help lines will be
concatenated into a single help line.]
[+?The help line will be prefixed with a timestamp (\v%Y%m%d-%H%M%S\v) and suffixed with the name of the rules definition file
being processed.]
[+Abbreviated rule (+ or -)?Each rule definition line looks like this:][+\

    <action> <service>/<protocol> <direction> <scope> <destination> ...]
[+?where:]{
[+action?The action Little Snitch should take when enacting this rule; this is either the \v+\v or \v-\v symbol, to respectively
allow or deny the connection.]
[+service?This is either a service name or a port number. If a service name is provided, it will be looked up in
\v/etc/services\v and converted into a port number. Multiple services may be provided, separated by a comma (e.g.
\v80,8080,443\v).]
[+protocol?This is either the protocol name or its associated number as found in \v/etc/protocols\v. Protocol names are converted
to a number. Multiple protocols can be specified, separated by a comma (e.g. \vtcp,udp\v).]
[+direction?This allows to specify whether the rule applies to outgoing communications (\vout\v), incoming communications
(\vin\v), or both (\vany\v).]
[+scope?The scope allows to restrict the rule definition line to the current user (\vuser\v), to system processes (\vsys\v) or,
on the contrary, to be enabled for everyone (\v*\v).]
[+destination?Destination can be either an IP address, a host name or a domain name. Multiple destinations can be specified on a
same line. Each destination should be separated from the next by at least one space. IP addresses, host names, and domain names
can be freely mixed.]{
    [+local-net?Local network]
    [+dns-servers?DNS servers]
    [+broadcast?Broadcast addresses]
    [+bonjour?Bonjour addresses]
    [+multicast?Multicast addresses]}}
[+?Rule definition lines can get quite long. Unix line-continuation marks are supported to split a rule over multiple lines, as
illustrated in the example below:][+\

    - http,https/tcp in/out \\
      url1 \\
      url2 \\
      url3]
[+Comment line (#)?Comments are introduced by a hash mark, exactly as in regular shell scripts. Note however that the hash tag
must be the first character on the line, leading whitespaces are not recognised.]
[+YAML RULES?(todo)]
[+EXAMPLES]
[+?Sample \babbreviated Snitch rules\b file content:][+\
    % /Applications/iTerm.app/Contents/MacOS/iTerm2
    + http,https/tcp out any domain::iterm2.com

    % /Applications/MacVim.app/Contents/MacOS/MacVim
    + ssh,https/tcp out any domain::github.com domain::github.io]
[+?Sample \bYAML\b file:][+\
    snitch    ::
      - procs :: /Applications/iTerm.app/Contents/MacOS/iTerm2
        rules ::
          - allow http,https/tcp out any any
          - deny 1935,18090/tcp out any any]
[+?]'
}

# __END__
