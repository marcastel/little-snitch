#! /bin/ksh
#! @revision  2019-11-11 (Mon) 16:10:54
#! @brief     Little snitch rule management utility


    #! A rule definition line is composed as 
    #!
    #!      rule        := <action> ' ' <netspec> ' ' <dirspec> ' ' <scope> ' ' <list>
    #!      action      := '+' | '-'
    #!      netspec     := <protocols> ( '/' <ports> )?
    #!      protocols   := <protocol> ( ',' <protocol> )*
    #!      ports       := <port> ( ',' <port> )*
    #!      dirspec     := <incoming> | <outgoing> | <both>
    #!      incoming    := 'in' | 'incoming'
    #!      outgoing    := 'out' | 'outgoing'
    #!      both        := '*' | 'both'
    #!      scope       := <me> | <any> | <system> | <all>
    #!      me          := 'user' | 'me'
    #!      any         := 'users' | 'any'
    #!      system      := 'system' | 'sys'
    #!      all         := '*' | 'all'
    #!      list        :=

# @{ INIT

typeset CURRENT_RULES="~/Library/Application Support/Little Snitch/configuration4.user.xpl"
typeset DEFAULT_RULES="/Library/Application Support/Objective Development/Little Snitch/configuration.xpl"

typeset LSR_USER_ROOT="${AITHOME}/etc/snitch"
typeset LSR_GLOB_ROOT="${DF_PREFIX:-/usr/df}/etc/snitch"

typeset cli_action='-'
typeset cli_service='http,https'
typeset cli_protocol='tcp'
typeset cli_direction='out'
typeset cli_mode='any'

# @}
# @{ FUNC

# @{ list2full

function list2full {

    integer whitelist=$1; shift
    typeset snitchtmp=$(mktemp -t snitch-$$) || { print -u2 "snitch: failed to create temporary file. Aborting."; exit 1; }

    typeset    action='-'; (( whitelist > 0 )) && action='+'
    typeset   service="${cli_service:-http,https}"
    typeset  protocol="${cli_protocol:-tcp}"
    typeset direction="${cli_direction:-out}"
    typeset      mode="${cli_mode:-user}"
    typeset    source=

    while (( $# > 0 )); do
        print -- "% any"
        print -- "$action" "$service/$protocol" "$direction" "$mode" $(< $1 )
        [[ -z $source ]] && source="$1" || source+=" $1"
        shift
    done > $snitchtmp

    cat $snitchtmp | abbr2full /dev/stdin $source

    rm $snitchtmp

}

# @}
# @{ abbr2full

function snitch_shortrule_parse_addresses {
    ;
}

# Parse the directions of a short rule
function snitch_shortrule_parse_direction {

    #! A short rule's direction can be specified as one of:
    #! - 'in' or 'incoming'
    #! - 'out' or 'outgoing'
    #! - '*', 'any' or 'both'

    case $1 in
    in|incoming)    return 1 ;;
    out|outgoing)   return 2 ;;
    '*'|any|both)   return 3 ;;
    *)              return 0 ;;
    esac

}

# Parse the network services in scope of a short rule
function snitch_shortrule_parse_netspec {
    # Extract the services from the network specifications
    typeset service=${netspec%/*}; typeset -A services; for service in ${service//,/ }; do

        # Handle case where service is specified with its port number
        [[ $service == +([0-9]) ]] && { services[$service]=true; continue; }

        # Otherwise lookup service and extract port(s)
        typeset svc; for svc in $(grep "^$service[[:space:]]" /etc/services |\
            awk '{print $2}' | sed 's,/.*,,' | sort -u)
        do services[$svc]=true
        done

    done

    # Extract the protocols from the network specifications
    typeset protocol=${netspec#*/}
    typeset -A protocols
    for protocol in ${protocol//,/ }; do

        # Handle case where protocol is specified with its port number
        [[ $protocol == +([0-9]) ]] && { protocols[$protocol]=true; continue; }

        # Otherwise lookup protocol and extract port(s)
        typeset pro; for pro in $(grep "^$protocol[[:space:]]" /etc/protocols |\
            awk '{print $2}' | sed 's,/.*,,' | sort -u)
        do protocols[$pro]=true
        done

    done

}

# Determine the rule's ownership
function snitch_shortrule_parse_ownership {

    # Collect the scope (i.e. mode) for this rule
    typeset scope=; typeset -A scopes; case ${mode:-NONE} in
    me|user)    scopes[me]=true     ;;
    any|users)  scopes[any]=true    ;;
    sys|system) scopes[system]=true ;;
    '*'|all)    scopes+=( [me]=true [system]=true [any]=true ) ;;
    *)          print -u2 "Invalid scope: $mode"; exit 1 ;;
    esac


}

function snitch_shortrule_parse {

    # Split the line under scrunity into its base components
    typeset action netspec dirspec mode list
    print -- "$1" | read action netspec dirspec mode list

    # Convert action into appropriate tokens for Little Snitch
    [[ $action == '+' ]] && action="allow" || action="deny"

    # Parse the short rule's direction
    snitch_shortrule_parse_direction $dirspec; integer direction=$?

    # Parse the services in scope of this short rule
    typeset -A services; snitch_shortrule_parse_services  @services $netspec

}

function abbr2full {

    typeset     file=${1:-/dev/stdin}   #!< Collect name of file to process
    typeset     source=${2:-$file}      #!< Source file name to display in help text

    integer     sourcerules=0           #!< Counter used to count all found input rules
    integer     targetrules=0           #!< Counter used to count the number of generated Little Snitch rules

    typeset -A  autosort                #!< Utility array used to filter out dupplicates
    typeset     helptext                #!< Buffer used to collect help text that will be associated to the generated rules
    typeset     lasttag                 #!< Keep track of last read _tag_ (first character of line)
    integer     linenb=0                #!< Counter used to keep track of the current line number in the input file/stream.
    typeset     processes               #!< Array that holds all the processes and binary files to which rules are assigned
    integer     rules=0                 #!< Counter used to keep track of the count of rules for processes under scrutiny

    # We process the input file or stream line by line. Piping the content of the source stream through the `read(1)` commmand is
    # a cricital component here as we are using this utility to read POSIX line continuation marks (i.e. a backslash at the end
    # of a line). This is a single pass operation to allow for the parsed `$file` to be a stream fed through a pipe.

    cat $file | while read line; do

        (( ++ linenb )); case ${line:0:1} in

        '?')

            # Help text
            [[ $lastag == '?' ]] && helptext+="${line#?*([[:space:]])}" || helptext="${line#?*([[:space:]])}"
            lasttag=${line:0:1}

            ;;
        '%')

            # Process path
            (( rules > 0 )) && { rules=0; unset processes autosort; }
            lasttag=${line:0:1}

            typeset process="${line#%*([[:space:]])}"
            [[ -n ${autosort["$process"]} ]] && continue
            autosort["$process"]=true
            processes+=("$process")

            ;;
        [+-])
            # Rule definition
            (( ++ rules       ))
            (( ++ sourcerules ))

            lasttag=${line:0:1}

            # @{ Step 1: Parse the rule definition line

            dirspec=${dirspec//both/in\/out}
            for direction in ${dirspec//\/ }; do
                case $direction in
                    in|incoming)    directions[incoming]=true ;;
                    out|outgoing)   directions[outgoing]=true ;;
                    *)              print -u2 "$file: $linInvalid direction: $direction"
                                    exit 1
                                    ;;
                esac
            done

            # Finally process all destinations
            typeset item; typeset -A addresses domains names keywords; for item in $list; do
                if   [[ ${item:0:7} == "domain:" ]]
                then domains[${item#domain:}]=true
                elif [[ $item == {1,3}([0-9]){0,2}(\.{1,3}([0-9])){1}(/+([0-9])) ]]
                then addresses[$item]=true
                elif [[ $item == {1,3}([0-9]){3}(\.{1,3}([0-9])){0,1}(/+([0-9])) ]]
                then addresses[$item]=true
                elif [[ $item == @(local-net|dns-servers|broadcast|bonjour|multicast) ]]
                then keywords[$item]=true
print "Adding keywords: $item"
                else names[$item]=true
                fi
            done

            # Let's clean the house a little
            unset dirspec mode netspec

            # @}
            # @{ Step 2: Convert the definition line into Little Snitch rules

            for (( i=0; i < ${#processes[@]}; ++ i )); do
print "Process id is $i"
                process="${processes[$i]}"
                for direction in ${!directions[@]}; do
                    for service in ${!services[@]}; do
                        for protocol in ${!protocols[@]}; do
                            for scope in ${!scopes[@]}; do

                                typeset record=$(
                                    print "action: $action";
                                    print "direction: $direction";
                                    print "process: $process";
                                    print "owner: $scope";
                                    print "port: $service";
                                    print "protocol: $protocol";
                                    print "help: $(date +%Y%m%d-%H%M) - ${helptext:-Auto-generated rule} [$source]";
                                )

print -- "keywords: ${!keywords[@]}"
                                (( ${#addresses[@]} > 0 )) && (( ++targetrules )) && print "$record\ndestination: ${!addresses[@]}\n";
                                (( ${#keywords[@]}  > 0 )) && (( ++targetrules )) && print "$record\ndestination: ${!keywords[@]}\n";
                                (( ${#names[@]}     > 0 )) && (( ++targetrules )) && print "$record\ndestination: ${!names[@]}\n";
                                (( ${#domains[@]}   > 0 )) && (( ++targetrules )) && print "$record\ndestination: domain ${!domains[@]}\n";

                            done
                        done
                    done
                done
            done

            unset addresses directions domains keywords names processes protocols scopes services

            # @}

            ;; # @}
        ''|'#') # @{ Comment line (and blank lines)
                # Comments are silently ignored. They do not affect state logic.
                ;; # @}
        *)      # @{ Other content
                # Bail out on any unrecognised content
                print -u2 "fatal: unexpected content at line $linenb\n\t$line"
                exit 1
                ;; # @}
        esac

    done

    print -u2 -- "$source: converted $sourcerules abbreviated rules into $targetrules Little Snitch rules."

    unset autosort

}

# @}
# @{ update_yoyo_blacklist

function update_yoyo_blacklist {

    typeset url="http://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&showintro=0&mimetype=plaintext"
    curl -SsL "$url" | cut -f2 -d' ' > $AITHOME/etc/snitch/internet/pgl-yoyo.deny

}

# @}

# @}
# @{ HELP

# Determine action to enact
typeset action usage='[-1]'; [[ -n $1 && ${1:0:1} != '-' ]] && { action=$1; shift; }

case ${action:-none} in

compress)   usage+=$'[+NAME?compress -- compress Little Snitch rules.]
[+DESCRIPTION?This command is primarily intended to convert rules copied from Little Snitch via the clipboard.]'

;;
expand)     usage+=$'[+NAME?expand -- expand shorthand rules into Little Snitch pasteboard format.]
[+DESCRIPTION?This command is the reverse of the \bcompress\b command; it allows to convert a shorthand rule into an ASCII syntax
that can be pasted directly into Little Snitch.]
[+?Note: This used to be the only way to import rules into Little Snitch prior to the introduction of rulesets.]'


;;

convert)

    usage+=$'
    [+NAME?
        snitch convert -- Convert configuration files to Little Snitch rules]
    [+DESCRIPTION?
        The \bconvert\b action is used to convert abbreviated rules into Little Snitch rules. The result can then be copied and
        pasted into the Little Snitch menu bar application; this is currently the only way to inteface with Little Snitch. A
        typical use case is][+\
            snitch convert --copy $AITHOME/etc/snitch/*/*.lsr]
    [+?Beware, in case of a (very) large number of rules; a cut/paste into Little Snitch, may hit timeouts or even freeze the
        system.]
    [c:copy?By default converted rules are output to \vSTDOUT\v. By using this option, output is placed in the MacOS clipboard so
        that it can be directly pasted into Little Snitch. This is done using the system utility \vpbcopy(1)\v.]
    [i:inline?This option allows dynamic generation of Little Snitch rules by defining an abbreviated rule directly on the
        command line rather than in a configuration file, using the abbreviated rule options, below.]
    [+Abbreviated rule options?The options in this section allow to create a custom abbreviated rule to be used in conjunction
        with the \v--inline\v or \v--list\v options. See the \bCONFIGURATION FILE SYNTAX\b for further understanding on how to
        effectively use the options presented hereafter.]
    [s:service?Comma separated list of services, names or port numbers]:[CLIST:=http,https]
    [p:protocol?Comma separated list of protocols, names or ID number]:[CLIST:=tcp]
    [d:direction?Direction, either \vin\v, \vout\v, and \vboth\v.]:[KEYWORD:oneof:in,out,both:out]
    {[in?incoming][out?outgoing][both?in/out]}
    [m:mode?Authorisation scope (or mode); one of \vuser\v, \vany\v or \vsystem\v]
    [+Black/white list options?The options in this section allow to handle black and white lists. See the \bBLACK/WHITE LISTS\b
        section for futher details.]
    [B!:whitelist?When the \v--list-mode\v is toggled, input is assumed to be a \bblacklist\b and the generated Little Snitch
        rules will be \bdeny\b rules. Use the \v--whitelist\v option to change the rule action to \ballow\b.]
    [L:list?When this option is triggered, input files are assumed to be black or white lists rather than standard configuration
        files.]
    [+?]'

    ;;
list)

    action="list" usage+=$'
    [+NAME?snitch rules -- List all Little Snitch rules]
    [+DESCRIPTION?The \brules\b command allows to list Little Snitch rules that have been validated (i.e. temporary rules will not
    appear in the output.]
    [a:abbreviate?XXX]
    [+?]'

    ;;
none|*)

    action="none" usage+=$'[+NAME?snitch -- Little Snitch command line utility]
    [+DESCRIPTION?The main purpose of the \asnitch\a utility is to allow the handling and management of \aLittle Snitch\a rules.
    This latter is a personal _firewall_ for MacOS that informs you whenever a programme attempts to establish an outgoing
    Internet connection. You can allow or deny these connections, or define rules to handle future attempts automatically.]
    [+?Little Snitch is a GUI application and rules are entered through the user interface with no access to their persistent
    storage (at least not officially through a published API). Managing rules rapidly becomes a painful administrative task. The
    purpose of this utility is facilitate such administration. This is done by managing Little Snitch rules upfront in
    configuration files. See the \bCONFIGURATION FILE SYNTAX\b section for details on the contents of such files.]
    [+?Only two commands are currently supported:]{
        [convert?Converts abbreviated rules into Little Snitch rules ready for import.]
        [rules?Lists all (saved) Little Snitch rules]}
    [+?For further details on a specific command, invoke it\'s man page:][+\
        snitch <command> --man]
    [+?]'

    ;;
esac

# @{ Configuration files & black/white lists

[[ $action == @(none|convert) ]] && usage+=$'[+CONFIGURATION FILE SYNTAX?Configuration files utility provide some syntaxic sugar
    to define abbreviated rules that are then easily converted to Little Snitch rules using this utility using the \bconvert\b action.]
    [+?Though not mandatory, it is recommended to name configuration files with the \b.lsr\b extension, which is the abbreviation
    for \bLittle Snitch rule\b. It is also recommended to group configuration files by topic in subdirectories. A typical
    subdirectory split could look like this:][+\
        devices/        # Peripherals and devices (printers, ...)
        foss/           # Open source components (Firefox, ...)
        services/       # Online-services (SaSS, ...)
        software/       # Licensed software
        system/         # System processes
        web/            # Web sites (http, https)]
    [+?Configuration files are line-based records identified by the first character of the line.]{
        [%%?Process path]
        [????Help line]
        [++/-?Abbreviated rule]
        [##?Comment line]}
    [+Process path?The process path provides the absolute path of the MacOS binary to which subsequent abbreviated rules
    apply.][+\
        % /Applications/Mail.app/Contents/MacOS/Mail]
    [+?Multiple process paths can be specified, one process path per line. Subsequent abbreviated rules will be applied to all
    process paths. Imagine for instance defining a set of web browser rules for all browser applications installed on your Mac.
    Whenever a process path is encountered after one or more abbreviated rules, the previous list of process paths is discarded;
    this allows to contain multiple process groups, each with their own set of rules.]
    [+Help line?A help line can be associated to a process path. This help line will be embedded in each generated rule and will
        be visible in the Little Snitch application, once the generated rules have been imported. Multiple contiguous help lines
        will be concatenated into a single help line.]
        [+?The help line will be prefixed with a timestamp (\v%Y%m%d-%H%M%S\v) and suffixed with the name of the rules definition
        file being processed.]
    [+Abbreviated rule?Each rule definition line looks like this:][+\
        <action> <service>/<protocol> <direction> <scope> <destination> ...]
    [+?where:]{
        [action? The action Little Snitch should take when enacting this rule; this is either the \v+\v or \v-\v symbol, to
            respectively allow or deny the connection.]
        [service?This is either a service name or a port number. If a service name is provided, it will be looked up in
            \v/etc/services\v and converted into a port number. Multiple services may be provided, separated by a comma (e.g.
            \v80,8080,443\v).]
        [protocol?This is either the protocol name or its associated number as found in \v/etc/protocols\v. Protocol names are
            converted to a number. Multiple protocols can be specified, separated by a comma (e.g. \vtcp,udp\v).]
        [direction?This allows to specify whether the rule applies to outgoing communications (\vout\v), incoming communications
            (\vin\v), or both (\vin/out\v).]
        [scope?The scope allows to restrict the rule definition line to the current user (\vuser\v), to system processes (\vsys\v)
            or, on the contrary, to be enabled for everyone (\v*\v).]
        [destination?Destination can be either an IP address, a host name or a domain name. Multiple destinations can be specified
            on a same line. Each destination should be separated from the next by at least one space. IP addresses, host names,
            and domain names can be freely mixed.]{
                [local-net  ?Local network]
                [dns-servers?DNS servers]
                [broadcast  ?Broadcast addresses]
                [bonjour    ?Bonjour addresses]
                [multicast  ?Multicast addresses]}}
    [+?Rule definition lines can get quite long. Unix line-continuation marks are supported to split a rule over multiple lines,
    as illustrated in the example below:][+\
        - http,https/tcp in/out \\
            url1 \\
            url2 \\
            url3]
    [+Comment line?Comments are introduced by a hash mark, exactly as in regular shell scripts. Note however that the hash tag
    must be the first character on the line, leading whitespaces are not recognised.]
    [+BLACK/WHITE LISTS?Though abbreviated rules are significantly less verbose than normal Little Snitch rules, we often need
    plain black lists (and white lists) to apply a same rule to a wide range of hosts and domains. This behaviour is toggled with
    the \v--blacklist\v and \v--whitelist\v options that both trigger the \blist mode\b. In this mode, the file parser doesn\'t
    expect a configuration file syntax, but rather a flat list of hosts, ip address and ranges, domains or reserved destination
    keywords.]
    [The aforementioned options toggle, respectively, deny and allow rules. The \v--direction\v, \v--protocol\v, \v--scope\v, and
    \v--service\v options, as well as the \v--process\v and \v--help\v options, can be used to customise the rule construction. If
    none specified, the rules will be automatically constructed for outgoing connections:][+\
        % any
        ?? Blacklist
        - http,https/tcp out]
    [+DIRECTORIES]{
        [\v'${DF_PREFIX:-/usr/df}$'/etc/snitch\v?Global Little Snitch rules]
        [\v~/etc/snitch\v?User specific Little Snitch rules]}
    [+FILES]{[~/'$CURRENT_RULES$'?User-specific configuration file.]}'

# @}

# @}
# @{ OPTS

typeset ls_config="$CURRENT_RULES"
typeset pbcopy=cat
integer inline=0
integer islist=0
integer whitelist=0

typeset -A iservices iprotocols idirections imode

while getopts "$usage" option; do case $action in

convert)
    case $option in

    c)  pbcopy="pbcopy" ;;
    i)  (( ++ inline )) ;;

    s)    iservices[$OPTARG]=true ;;
    p)   iprotocols[$OPTARG]=true ;;
    d)  idirections[$OPTARG]=true ;;
    m)        imode[$OPTARG]=true ;;

    B) (( ++ islist )) && whitelist=$OPTARG ;;
    L) (( ++ islist )) ;;

    esac ;;

esac; done; (( OPTIND > 1 )) && shift $(( OPTIND - 1 ))
unset usage

# @}
# @{ MAIN

[[ -n $action ]] && case $action in
convert)

    typeset command=abbr2full;  (( islist > 0 )) && command=list2full
    typeset options=;           (( islist > 0 )) && options="$whitelist"
    typeset file; for file in "$@"; do
        $command $options "$file"
    done | $pbcopy

    ;;
esac

# @}

# vim: nospell
